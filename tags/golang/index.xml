<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on shank</title>
    <link>https://shankisme.com/tags/golang/</link>
    <description>Recent content in golang on shank</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 22 Jan 2021 01:41:04 +0800</lastBuildDate><atom:link href="https://shankisme.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go-mock初探</title>
      <link>https://shankisme.com/posts/go-mock%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Fri, 22 Jan 2021 01:41:04 +0800</pubDate>
      
      <guid>https://shankisme.com/posts/go-mock%E5%88%9D%E6%8E%A2/</guid>
      <description>go mock 用于虚拟接口。一般只要提供interface，无论有没有实现该interface的类型，gomock会根据接口的输入输出提供一个实现了该interface的mock实例，同时在自定义mock实例的输入输出前，可以根据期望过滤输入，产生想要的输出或调用某些函数。说的很晦涩，看点代码吧。
目录结构：
trymock/ /db |--db.go |--db_test.go /mock |--db_mock.go // generated by mockgen //db.go type DB interface { Get(key string) (int, error) } func GetFromDB(db DB, key string) int { if value, err := db.Get(key); err == nil { return value } return -1 } gomock中，DB实例只能通过传参传入生成mock文件
mockgen -source=db.go -destination=db_mock.go -package=mock gomock生成的db_mock.go如下
//db_mock.go // Code generated by MockGen. DO NOT EDIT. // Source: db.go  // Package mock_db is a generated GoMock package.</description>
    </item>
    
  </channel>
</rss>
